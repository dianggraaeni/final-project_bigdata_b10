version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2 # Gunakan versi spesifik untuk stabilitas
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.3.2 # Gunakan versi spesifik yang sama
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092" # Untuk komunikasi internal Docker
      - "29092:29092" # Untuk diakses dari host machine (producer/consumer Python kita)
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true' # Memungkinkan pembuatan topic otomatis
    networks:
      - app-network

  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z # Gunakan versi spesifik
    hostname: minio
    container_name: minio
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    environment:
      MINIO_ROOT_USER: fpbigdata10 # GANTI DENGAN YANG AMAN
      MINIO_ROOT_PASSWORD: fpbigdata10 # GANTI DENGAN YANG AMAN
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network

volumes:
  minio_data:

networks:
  app-network:
    driver: bridge